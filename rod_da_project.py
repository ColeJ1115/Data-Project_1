# -*- coding: utf-8 -*-
"""Rod_DA_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqsHwmj8fxBFPpaKlBTpQUy91xwsQh6y

## Analysis
"""

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd

"""Importing our cleansed files & glancing at the data"""

df_basics = pd.read_parquet('/content/basics_final.parquet')

df_ratings = pd.read_parquet('/content/ratings_final.parquet')

df_roles = pd.read_parquet('/content/roles_final.parquet')

df_basics.info()

df_basics.head()

df_roles.info()

df_roles.head()

df_ratings.info()

df_ratings.head()

"""Ratings: High Level Overview

Average ratings across all movies was 6.1, with scores ranging from 1 all the way to 10.
"""

df_ratings.describe()

sns.displot(df_ratings, x="averageRating", bins=18)
plt.xlabel("Average Rating")
plt.title("Average Rating Frequency Distribution")

"""Ratings by Genre:"""

gb_genre = df_basics.merge(df_ratings, on = 'tconst')

gb_genre.describe()

gb_genre['genres'].nunique()

gb_genre.loc[:,['genres','averageRating']].groupby('genres').mean().reset_index().sort_values('averageRating', ascending = False)

df_sorted_genres_counts = gb_genre.loc[:,['genres','averageRating']].groupby('genres').agg(['count','mean']).reset_index().sort_values(('averageRating','count'), ascending = False)

df_sorted_genres_counts.head()

df_top10 = df_sorted_genres_counts.head(10)

sns.barplot(df_top10, y = 'genres', x = ('averageRating','count'))

sns.barplot(df_top10, y = 'genres', x = ('averageRating','mean'))

df_sorted_genres_means = gb_genre.loc[:,['genres','averageRating']].groupby('genres').agg(['count','mean']).reset_index().sort_values(('averageRating','mean'), ascending = False)

#MEAN rating by genre sorted- ROD
df_ratings = pd.read_parquet('ratings_final.parquet')
df_basics = pd.read_parquet('basics_final.parquet')

merged_df = pd.merge(df_ratings, df_basics, on='tconst')

genres = merged_df['genres'].str.split(',', expand=True).stack().reset_index(level=0).rename(columns={0:'genre'})
merged_df = merged_df.merge(genres, left_index=True, right_index=True)


mean_ratings = merged_df.groupby('genre')['averageRating'].mean().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
mean_ratings.plot(kind='bar', color='skyblue')
plt.title('Mean Ratings by Genre')
plt.xlabel('Genre')
plt.ylabel('Mean Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

df_sorted_genres_means.head(10)

"""Ratings by Year:"""

sns.lineplot(data = gb_genre, x = 'startYear', y = 'averageRating', errorbar = None)
plt.title("Average Rating by Year")
plt.xlabel("Year")
plt.ylabel("Average Rating")

"""##Note the spike in recent years: we think it may be due to movies being "overhyped" when they first come out!"""

gb_genre_no24 = gb_genre.loc[gb_genre["startYear"] < 2022]

sns.lineplot(data = gb_genre_no24, x = 'startYear', y = 'averageRating', errorbar = None)
plt.title("Average Rating by Year")
plt.xlabel("Year")
plt.ylabel("Average Rating")
plt.ylim(5.9, 6.2)

"""Ratings by Run Time:"""

gb_genre.info()
##see nulls for runtimeminutes; needed to exclude from this portion of analysis

gb_genre.dropna(subset=['runtimeMinutes'], inplace=True)

gb_genre.describe()
## see crazy outliers

gb_genre['runtimeMinutes'].quantile(0.01)

gb_genre['runtimeMinutes'].quantile(0.99)

gb_genre_rt = gb_genre.loc[(gb_genre["runtimeMinutes"] < gb_genre['runtimeMinutes'].quantile(0.99)) & (gb_genre["runtimeMinutes"] > gb_genre['runtimeMinutes'].quantile(0.01))]
## excludes the outliers

gb_genre_rt.describe()

sns.lineplot(data = gb_genre_rt, x = 'runtimeMinutes', y = 'averageRating', errorbar=None)
plt.title("Average Rating by Runtime")
plt.xlabel("Runtime")
plt.ylabel("Average Rating")

gb_genre_rt['runtime_bins'] = pd.cut(gb_genre_rt['runtimeMinutes'], 24)
##considered trying to split runtime into bins to help clear up the data further, but hit a road block

"""Ratings by Directors:"""

df_roles.head()

df_directors = df_roles.loc[df_roles['category'] == 'director']
## wanted directors only

df_directors.head()

df_directors['nconst'].nunique()

df_crew = pd.read_csv('https://datasets.imdbws.com/title.crew.tsv.gz', sep = '\t', usecols = ['tconst','directors'], na_values = ['\\N'])

gb_direct = df_basics.merge(df_crew, on = 'tconst')

gb_direct = gb_direct.merge(df_ratings, on = 'tconst')

gb_direct.head(20)

df_sorted_directors_counts = gb_direct.loc[:,['directors','averageRating']].groupby('directors').agg(['count','mean']).reset_index().sort_values(('averageRating','count'), ascending = False)

df_sorted_directors_counts.head(20)

df_vet_directors = df_sorted_directors_counts.loc[df_sorted_directors_counts[('averageRating','count')] > 10].sort_values(('averageRating','mean'), ascending = False)
##looking for experienced directors by using number of movies directed > 10

df_top5 = df_vet_directors.head()

df_top5.head()

df_sorted_directors_means = gb_direct.loc[:,['directors','averageRating']].groupby('directors').agg(['count','mean']).reset_index().sort_values(('averageRating','mean'), ascending = False)

df_sorted_directors_means.head(15)

df1 = df_directors.loc[df_directors['nconst'].isin(df_top5['directors'])].drop_duplicates()

df_names_2 = df1.drop(columns = ['tconst'])

df_names_2 =df_names_2.drop_duplicates()

df_names_2.sort_values('nconst')

df_top5.sort_values('directors')

df_names_2['avg rating'] = df_top5[('averageRating','count')]
##tried to add the mean column with no success

# director by mean rating (only if they directed 10 or more movies- ROD)
merged_df = pd.merge(df_ratings, df_basics, on='tconst')
merged_df = pd.merge(merged_df, df_roles, on='tconst')


directors_df = merged_df[merged_df['category'] == 'director']


director_movie_counts = directors_df['primaryName'].value_counts()


directors_with_10plus_movies = director_movie_counts[director_movie_counts >= 10].index


directors_df_filtered = directors_df[directors_df['primaryName'].isin(directors_with_10plus_movies)]

mean_ratings_directors = directors_df_filtered.groupby('primaryName')['averageRating'].mean().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
mean_ratings_directors.head(10).plot(kind='bar', color='skyblue')
plt.title('Mean Ratings by Director (Top 10)')
plt.xlabel('Director')
plt.ylabel('Mean Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# chart that shows hieghst rated movie of each year and its genre -ROD
merged_df = pd.merge(df_ratings, df_basics, on='tconst')

highest_rated_movies_by_year = merged_df.groupby('startYear').apply(lambda x: x[x['averageRating'] == x['averageRating'].max()])

highest_rated_movies_with_genre = highest_rated_movies_by_year[['startYear', 'primaryTitle', 'genres']]


print(highest_rated_movies_with_genre)

